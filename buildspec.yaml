version: 0.2

phases:
  pre_build:
    commands:
      - echo Starting lightweight PostgreSQL container for build...
      - CONTAINER_NAME=ci-postgres
      - |
        if [ "$(docker ps -aq -f name=$CONTAINER_NAME)" ]; then
          echo "Cleaning up existing $CONTAINER_NAME container...";
          docker rm -f $CONTAINER_NAME || true;
        fi
      - docker pull postgres:16-alpine
      - |
        docker run -d --name $CONTAINER_NAME \
          -e POSTGRES_DB=mydb \
          -e POSTGRES_USER=postgre \
          -e POSTGRES_PASSWORD=postgre \
          -p 5432:5432 postgres:16-alpine
      - echo Waiting for PostgreSQL to become ready...
      - |
        set -e; \
        for i in {1..60}; do \
          if docker exec $CONTAINER_NAME pg_isready -U postgre -d mydb >/dev/null 2>&1; then \
            echo "PostgreSQL is ready"; \
            break; \
          fi; \
          echo "Waiting for PostgreSQL ($i/60)..."; \
          sleep 1; \
          if [ "$i" -eq 60 ]; then \
            echo "PostgreSQL did not become ready in time"; \
            docker logs $CONTAINER_NAME || true; \
            exit 1; \
          fi; \
        done
      - mvn clean install
      - echo Logging in to Amazon ECR...
      - aws --version
      - REPOSITORY_URI=617458301558.dkr.ecr.ap-south-1.amazonaws.com/start_to_end_deployment_flow_aws_repo
      - aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin $REPOSITORY_URI
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Writing image definitions file...
      - printf '[{"name":"StartToEndDeploymentFlow","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      - echo Writing image definitions file...
      # add your container name
      - DOCKER_CONTAINER_NAME=start_to_end_deployment_flow_aws_repo
      - printf '[{"name":"%s","imageUri":"%s"}]' $DOCKER_CONTAINER_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      - echo $DOCKER_CONTAINER_NAME
      - echo printing imagedefinitions.json
      - cat imagedefinitions.json
      - echo Stopping and removing PostgreSQL container...
      - |
        if [ "$(docker ps -aq -f name=ci-postgres)" ]; then
          docker rm -f ci-postgres || true;
        fi

artifacts:
  files:
    - imagedefinitions.json
    - target/StartToEndDeploymentFlow.jar